// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
struct MatrixDimensions
{
    int width;
    int height;
    
    int GetLength()
    {
        return width * height;
    }
};

static const int GROUP_SIZE = 32;

//Dimensions      Node Values = cost Gradient Bias
RWStructuredBuffer<MatrixDimensions> dimensions; //node Value, inputs, costGradientWeights

//Weighted Inputs
RWStructuredBuffer<double> inputs; //Need to transpose this

//Node Values
RWStructuredBuffer<double> nodeValues;

//Activation
RWStructuredBuffer<double> costGradientWeight;

int NodeIndex(int row, int col)
{
    return row * dimensions[0].width + col;
}

int InputsIndex(int row, int col)
{
    return col * dimensions[1].height + row;
}

int CostGradientIndex(int row, int col)
{
    return row * dimensions[2].width + col;
}

///Performs the dot product necessary for the matrix multiplication
double DotProduct(int row, int column, int matrixIndex)
{
    double sum = 0;
     // Perform matrix multiplication
    for (int i = 0; i < dimensions[0].width; ++i)
        sum += nodeValues[matrixIndex * (dimensions[0].GetLength()) + NodeIndex(row, i)] * inputs[matrixIndex * (dimensions[1].GetLength()) + InputsIndex(i, column)]; //InputsIndex(i, column)
    
    return sum;
}

groupshared double sharedArray[GROUP_SIZE];

double GetSum()
{
    double sum = 0;
    for (int i = 0; i < GROUP_SIZE; ++i)
    {
        sum += sharedArray[i];
    }
    
    return sum;
}

[numthreads(1, 1, GROUP_SIZE)]
void CSMain(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    int row = DispatchThreadID.y;
    int col = DispatchThreadID.x;
    int matrixIndex = DispatchThreadID.z;
    
     // Each thread computes its value
    double value = DotProduct(row, col, matrixIndex);

    // Write the value to shared memory
    sharedArray[matrixIndex] = value;

    // Synchronize to ensure all writes to shared memory are completed
    GroupMemoryBarrierWithGroupSync();

    // One thread in the group sums the values and writes to global memory
    if (matrixIndex == 0)
    {
        // Perform the final operation
        costGradientWeight[CostGradientIndex(row, col)] += GetSum();
    }
    
    //costGradientWeight[CostGradientIndex(row, col)] += DotProduct(row, col, matrixIndex); //row * dimensions[2].width + col
}
